#!/usr/bin/env bash

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

cat $1/.apps | while read SUBDIR BUILDPACK; do
  if [ -z "$SUBDIR" -o -z "$BUILDPACK" ]; then
    echo "Invalid app configuration $SUBDIR $BUILDPACK. Expected a subdirectory and a buildpack URL separated by whitespace."
    exit 1
  fi

  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${BUILDPACK%#*}
  branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading buildpack for $SUBDIR: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone --depth=1 $url $dir >/dev/null 2>&1
      if [ -f "$dir/.gitmodules" ]; then
        echo "=====> Detected git submodules. Initializing..."
        (cd $dir && git submodule update --init --recursive)
      fi
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1/$SUBDIR) || true

    if [ "$framework" != "no" ]; then
      echo "=====> Detected Framework: $framework"
    else
      echo "=====> Warning: framework detection failed. Continuing anyway."
    fi

    $dir/bin/compile $1/$SUBDIR $2 $3

    if [ $? != 0 ]; then
      exit 1
    fi

    # check if the buildpack left behind an environment for subsequent ones
    if [ -e $dir/export ]; then
      source $dir/export
    fi
  fi
done
